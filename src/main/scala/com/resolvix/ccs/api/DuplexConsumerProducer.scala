package com.resolvix.ccs.api

import scala.util.Try

/**
  * The [[DuplexConsumerProducer]] trait provides for bi-directional
  * communication between two or more peers that appear on one side
  * of the relationship, and on the other; hereinafter referenced as
  * the left and right hand sides respectively.
  *
  * Different types of objects can flow between the left and right
  * peers, and a class implementing the [[DuplexConsumerProducer]]
  * interface can either operate as a form of conduit between the
  * left and right consumer-producers, or it may perform some
  * buffering or object or protocol conversion function.
  *
  * @tparam DCP
  *   the class implementing the [[DuplexConsumerProducer]] trait
  *
  * @tparam LC
  *   the type of object to be accepted by the consumer on the left hand side
  *   of the peer-to-peer consumer-producer relationship
  *
  * @tparam LP
  *   the type of object to be generated by the producer on the left hand side
  *   of the peer-to-peer consumer-producer relationship
  *
  * @tparam RC
  *   the type of object to be accepted by the consumer on the right hand side
  *   of the peer-to-peer consumer-producer relationship
  *
  * @tparam RP
  *   the type of object to be generated by the producer on the right hand
  *   side of the peer-to-peer consumer-producer relationship
  *
  */
trait DuplexConsumerProducer[DCP <: DuplexConsumerProducer[DCP, LC, LP, RC, RP], LC, LP, RC, RP] {

  def getLeftConsumer: Consumer[LC]

  def getRightConsumer: Consumer[RC]

  def getLeftProducer: Producer[LP]

  def getRightProducer: Producer[RP]

  def registerLeft(consumer: Consumer[LC]): Try[Boolean]

  def registerRight(consumer: Consumer[RC]): Try[Boolean]

  def registerLeft(producer: Producer[LP]): Try[Boolean]

  def registerRight(producer: Producer[RP]): Try[Boolean]

}
