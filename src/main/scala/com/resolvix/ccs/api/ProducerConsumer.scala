package com.resolvix.ccs.api

import scala.util.Try

/**
  * Created by rwbisson on 09/11/16.
  */
trait ProducerConsumer[
  PC <: ProducerConsumer[PC, P, C],
  P,
  C
] {

  /**
    *
    * @return
    */
  def getConsumer: Consumer[C]

  /**
    *
    * @return
    */
  def getProducer: Producer[P]

  /**
    *
    * @param consumer
    * @tparam CP2
    * @return
    */
  def register[CP2 <: Consumer[P]](
    consumer: CP2
  ): Try[Boolean]

  /**
    *
    * @param producer
    * @tparam PC2
    * @return
    */
  def registerPP[PC2 <: Producer[C]](
    producer: PC2
  ): Try[Boolean]

  /**
    * Register a ConsumerProducer to consume the produce generated by the
    * instant ProducerConsumer.
    *
    * @param consumerProducer
    * @tparam CP
    * @return
    */
  def registerP[CP <: ConsumerProducer[CP, P, _]](
    consumerProducer: CP
  ): Try[Boolean]

  /**
    *
    * @param consumerProducer
    * @tparam CP
    * @return
    */
  def crossRegister[CP <: ConsumerProducer[CP, P, C]](
    consumerProducer: CP
  ): Try[Boolean]

  /**
    *
    * @param producerConsumer
    * @tparam PC2
    * @return
    */
  def registerC[PC2 <: ProducerConsumer[PC2, C, _]](
    producerConsumer: PC2
  ): Try[Boolean]
}
